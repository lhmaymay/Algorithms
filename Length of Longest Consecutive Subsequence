def findLongestConseqSubseq(arr): 
  
    s = set() 
    ans=0
    n=len(arr)
    # Hash all the array elements 
    for ele in arr: 
        s.add(ele) 
  
    # check each possible sequence from the start 
    # then update optimal length 
    for i in range(n): 
  
         # if current element is the starting 
        # element of a sequence 
        if (arr[i]-1) not in s: 
  
            # Then check for next elements in the 
            # sequence 
            j=arr[i] 
            while(j in s): 
                j+=1
  
            # update  optimal length if this length 
            # is more 
            ans=max(ans, j-arr[i]) 
    return ans 
# findLongestConseqSubseq([])
# 0
findLongestConseqSubseq([1,5,6,8,9,4,0,1])
# 3

# why use set not array or list or tuple?
# because it automatically dedupe

# why not sort it first then save it, calculate length? save time for sorting
# time complexity: it is O(n) under the assumption that hash insert and search take O(1) time.
########################################################
m=[]
a=[1,5,6,8,9,4,0,1]
for x in a:
    m.append(x)
m  
# [1, 5, 6, 8, 9, 4, 0, 1]

############################################################
m=set()
a=[1,5,6,8,9,4,0,1]
for x in a:
    m.add(x)
m   
# {0, 1, 4, 5, 6, 8, 9}
# when using set it automatically dedupe and sort
