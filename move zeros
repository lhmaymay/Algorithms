# Function which pushes all 
# zeros to end of an array. 
Given an array of random numbers, Push all the zeroâ€™s of a given array to the end of the array. For example, 
if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. 
The order of all other elements should be same. Expected time complexity is O(n) and extra space is O(1).

Example:

Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
Output : arr[] = {1, 2, 4, 3, 5, 0, 0};

Input : arr[]  = {1, 2, 0, 0, 0, 3, 6};
Output : arr[] = {1, 2, 3, 6, 0, 0, 0};



def pushZerosToEnd(arr): 
    count = 0 # Count of non-zero elements 
    n=len(arr)
    # Traverse the array. If element  
    # encountered is non-zero, then 
    # replace the element at index 
    # 'count' with this element 
    for i in range(n): 
        if arr[i] != 0: 
              
            # here count is incremented 
            arr[count] = arr[i] 
            count+=1
      
    # Now all non-zero elements have been 
    # shifted to front and 'count' is set 
    # as index of first 0. Make all  
    # elements 0 from count to end. 
    for i in range(count,len(arr)):
        arr[i]=0
    return arr
print(pushZerosToEnd([1,0,2,0,3]))  
# [1,2,3,0,0]






  
# Function that pushes all the zeros  
# to the start and ones to the end of an array  
def pushBinaryToBorder(arr, n) :  
  
    # To store the count of elements  
    # which are not equal to 1  
    count1 = 0
      
    # Traverse the array and calculate  
    # count of elements which are not 1  
    for i in range(n) : 
        if (arr[i] != 1) : 
            arr[count1] = arr[i] 
            count1 += 1
  
    # Now all non-ones elements have been shifted to  
    # front and 'count1' is set as index of first 1.  
    # Make all elements 1 from count to end.  
    while (count1 < n) : 
        arr[count1] = 1
        count1 += 1
  
    # Initialize lastNonBinary position to zero  
    lastNonOne = 0
  
    # Traverse the array and pull non-zero  
    # elements to the required indices  
    for i in range(n - 1, -1, -1) : 
  
        # Ignore the 1's  
        if (arr[i] == 1) :  
            continue
              
        if (not lastNonOne) : 
  
            # Mark the position Of  
            # last NonBinary integer  
            lastNonOne = i 
  
        # Place non-zero element to  
        # their required indices  
        if (arr[i] != 0) : 
            arr[lastNonOne] = arr[i] 
            lastNonOne -= 1
  
    # Put zeros to start of array  
    while (lastNonOne >= 0) : 
        arr[lastNonOne] = 0
        lastNonOne -= 1
  
# Driver code  
if __name__ == "__main__" : 
      
    arr = [ 1, 2, 0, 0, 0, 3, 6 ];  
    n = len(arr);  
    pushBinaryToBorder(arr, n)  
    printArr(arr, n) 
